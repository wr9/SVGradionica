const prices = [
  0.06568841,
  0.0656764,
  0.06568011,
  0.06576738,
  0.06562413,
  0.06560907,
  0.06504284,
  0.0649015,
  0.06521644,
  0.06520526,
  0.06547899,
  0.06537249,
  0.06523109,
  0.06513641,
  0.06519698,
  0.06515044,
  0.06516389,
  0.06507831,
  0.06515219,
  0.06526499,
  0.06526616,
  0.06532791,
  0.06529946,
  0.06542301,
  0.06539907,
  0.06552649,
  0.06567459,
  0.06552931,
  0.06550856,
  0.06562895,
  0.06564344,
  0.06558008,
  0.06550869,
  0.06541906,
  0.06552871,
  0.06556594,
  0.06558093,
  0.06568189,
  0.0655635,
  0.06558451,
  0.06561261,
  0.06564431,
  0.06563995,
  0.06569887,
  0.06571142,
  0.06581757,
  0.06573473,
  0.0658286,
  0.06578657,
  0.06579231,
  0.06633061,
  0.06748665,
  0.06741375,
  0.06712327,
  0.06740471,
  0.06740719,
  0.06757203,
  0.06748509,
  0.06738554,
  0.06732301,
  0.06737489,
  0.06765605,
  0.06728798,
  0.06727779,
  0.06724515,
  0.06728746,
  0.06720591,
  0.06721664,
  0.06727826,
  0.06728374,
  0.06707316,
  0.06706917,
  0.06723404,
  0.06747851,
  0.06931299,
  0.07035949,
  0.07010941,
  0.07010888,
  0.0697011,
  0.06978939,
  0.06999424,
  0.06991348,
  0.06950807,
  0.06978142,
  0.06973111,
  0.06962602,
  0.06919222,
  0.06938689,
  0.06918038,
  0.06929653,
  0.06938749,
  0.06950168,
  0.07099247,
  0.07178334,
  0.0721834,
  0.07248346,
  0.07195954,
  0.07189271,
  0.07189436,
  0.07349333,
  0.07297099,
  0.07324911,
  0.07333869,
  0.07320975,
  0.07308463,
  0.07272264,
  0.07271544,
  0.07277386,
  0.07254328,
  0.07291509,
  0.07328496,
  0.07316687,
  0.07349363,
  0.07349964,
  0.07326395,
  0.07316987,
  0.07298002,
  0.07281629,
  0.07237903,
  0.07232297,
  0.07218904,
  0.0721151,
  0.07211692,
  0.07214082,
  0.07249944,
  0.07240436,
  0.07227684,
  0.07229243,
  0.07235758,
  0.07256182,
  0.07276133,
  0.0728679,
  0.07286198,
  0.07275297,
  0.0727932,
  0.07243465,
  0.07236375,
  0.07229047,
  0.07245453,
  0.07264234,
  0.07213799,
  0.07191544,
  0.07159527,
  0.07143679,
  0.07151749,
  0.07180385,
  0.07161881,
  0.07157246,
  0.07177093,
  0.07146707,
  0.07127059,
  0.07110605,
  0.0715666,
  0.07177932,
  0.07171151,
  0.07129378,
  0.07133011,
  0.0714201,
  0.07151421,
  0.07149937,
  0.07170056,
  0.07249745,
  0.07205292,
  0.07203705,
  0.07195927,
  0.07155904,
  0.07151103,
  0.07137252,
];
const color = "#FF8C00";

export default function Home() {
  const min = Math.min(...prices);
  const max = Math.max(...prices);
  const width = 180;
  const height = 42;
  const xRange = (max - min) * (width / height);

  return (
    <svg
      viewBox={`0 ${min} ${xRange} ${max - min}`}
      width={width}
      height={height}
      preserveAspectRatio="xMidYMid meet"
      style={{ transform: "scaleY(-1)", overflow: "visible" }}
    >
      <>
        <defs>
          <linearGradient id="gradient" x2="0%" y2="100%">
            <stop offset="0%" stopColor="white" stopOpacity="0.4" />
            <stop offset="100%" stopColor={color} stopOpacity="0.1" />
          </linearGradient>
          <clipPath id="clip">
            <polygon
              fill="none"
              stroke="black"
              points={`${prices
                .map((y, x) => `${(xRange / (prices.length - 1)) * x},${y}`)
                .join(" ")} ${xRange},${min} 0,${min}`}
            />
          </clipPath>
        </defs>
        <>
          <rect
            x={0}
            y={min}
            width={xRange}
            height={max - min}
            fill="url(#gradient)"
            clipPath="url(#clip)"
          />
          <polyline
            points={prices
              .map((y, x) => `${(xRange / (prices.length - 1)) * x},${y}`)
              .join(" ")}
            strokeWidth="1%"
            strokeLinejoin="round"
            stroke={color}
            fill="none"
          />
        </>
      </>
    </svg>
  );
}
